// <auto-generated />
using System;
using Event_Plus.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Event_Plus.Migrations
{
    [DbContext(typeof(Event_Context))]
    [Migration("20250327140340_Event_Plus")]
    partial class Event_Plus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Event_Plus.Domain.Comentario", b =>
                {
                    b.Property<Guid>("ComentarioEventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComentarioEvento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ExibirComentario")
                        .HasColumnType("BIT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComentarioEventoId");

                    b.HasIndex("EventoId");

                    b.HasIndex("ExibirComentario")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("Event_Plus.Domain.Evento", b =>
                {
                    b.Property<Guid>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("DATE");

                    b.Property<string>("DescricaoEvento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeEvento")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("TipoEventoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventoId");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("TipoEventoId");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("Event_Plus.Domain.Presenca", b =>
                {
                    b.Property<Guid>("PresencaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Situacao")
                        .HasColumnType("BIT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PresencaId");

                    b.HasIndex("EventoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Presenca");
                });

            modelBuilder.Entity("Event_Plus.Domain.Usuario", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasColumnType("VARCHAR(120)");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("SenhaUsuario")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR(60)");

                    b.Property<Guid>("TipoUsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsuarioId");

                    b.HasIndex("EmailUsuario")
                        .IsUnique();

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Event_Plus.Domains.TipoEvento", b =>
                {
                    b.Property<Guid>("TipoEventoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TituloTipoEvento")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("TipoEventoID");

                    b.ToTable("TipoEvento");
                });

            modelBuilder.Entity("Event_Plus.Domains.TipoUsuario", b =>
                {
                    b.Property<Guid>("TipoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TituloTipoUsuario")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("TipoUsuarioId");

                    b.ToTable("TipoUsuario");
                });

            modelBuilder.Entity("ProjectEventsPlus.Domain.Instituicao", b =>
                {
                    b.Property<Guid>("InstituicaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("InstituicaoId");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Instituicao");
                });

            modelBuilder.Entity("Event_Plus.Domain.Comentario", b =>
                {
                    b.HasOne("Event_Plus.Domain.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event_Plus.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Event_Plus.Domain.Evento", b =>
                {
                    b.HasOne("ProjectEventsPlus.Domain.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event_Plus.Domains.TipoEvento", "tipoEvento")
                        .WithMany()
                        .HasForeignKey("TipoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instituicao");

                    b.Navigation("tipoEvento");
                });

            modelBuilder.Entity("Event_Plus.Domain.Presenca", b =>
                {
                    b.HasOne("Event_Plus.Domain.Evento", "Evento")
                        .WithOne("Presenca")
                        .HasForeignKey("Event_Plus.Domain.Presenca", "EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event_Plus.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Event_Plus.Domain.Usuario", b =>
                {
                    b.HasOne("Event_Plus.Domains.TipoUsuario", "tipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoUsuario");
                });

            modelBuilder.Entity("Event_Plus.Domain.Evento", b =>
                {
                    b.Navigation("Presenca");
                });
#pragma warning restore 612, 618
        }
    }
}
